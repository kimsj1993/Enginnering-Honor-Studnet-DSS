# TODO: Python naming convention
# TODO: Field validation
# TODO: Verify cascade settings
from django.db import models

# Create your models here.

class Semester(models.Model):
    # id autogenerated
    Semester = models.CharField(max_length=16)
    AcademicYear = models.CharField(max_length=9)

    # Relations
    # Semester.Students autogenerated TODO: Check that this is actually generated and usable

# TODO: Ask Pauline
class Requirement(models.Model):
    # id autogen
    Code = models.CharField(max_length=15)
    Description = models.TextField(max_length=255)

class Activity(models.Model):
    # id autogenerated
    Date = models.DateField()
    Location = models.CharField(max_length=45)
    Details = models.TextField(max_length=255)

    # Relations
    # Activity.Departments autogenerated
    Semester = models.ForeignKey(Semester, on_delete=None)
    RequirementSatisfied = models.ForeignKey(Requirement, on_delete=None)

class Track(models.Model):
    id = models.CharField(primary_key=True, max_length=15)
    Name = models.CharField(max_length=45)

    # Relations
    SemesterStarted = models.ForeignKey(Semester, on_delete=None)

class Advisor(models.Model):
    AUIN = models.IntegerField()
    FirstName = models.CharField(max_length=45)
    LastName = models.CharField(max_length=45)
    MiddleName = models.CharField(max_length=45)

    # Relations
    Track = models.ForeignKey(Track, on_delete=None)

class Department(models.Model):
    Name = models.CharField(primary_key=True, max_length=7)
    ActivitiesPerSemester = models.IntegerField()
    AdvisingPerSemester = models.FloatField()

    # Relations
    # Department.Students autogenerated
    Activities = models.ManyToManyField(Activity)
    Advisors = models.ManyToManyField(Advisor)
    Track = models.ForeignKey(Track, on_delete=None)

    def ActivitesPerYear(self):
        return self.ActivitiesPerSemester * 2

    def AdvisingPerYear(self):
        return self.AdvisingPerSemester * 2

class Student(models.Model):
    EXCEPTION_CHOICE = (
        (0, '0'),
        (1, 'Admitted The After 12th Day'),
        (2, 'Co-Op'),
        (3, 'Galveston Campus'),
        (4, 'Internship'),
        (5, 'ECOS Coach'),
        (6, 'ECOS Fellow'),
        (7, 'Ambassador'),
        (8, 'Excom'),
        (9, 'Family Leave'),
        (10, 'Medical Leave'),
        (11, 'Taking The Semester Off'),
        (12, 'Not in Ecampus and Cohort'),
        (13, 'Missionary Work'),
        (14, 'Study Abroad'),
        (15, 'Not in EH'),
        (16, 'Unknown'),
        (17, 'Withdrew'),
    )

    UIN = models.IntegerField(primary_key=True)
    FirstName = models.CharField(max_length=45)
    LastName = models.CharField(max_length=45)
    MiddleName = models.CharField(max_length=45)
    Email = models.EmailField(max_length=45)
    GPA = models.FloatField()
    TimesOnProbation = models.IntegerField(default=0)
    TimesDismissed = models.IntegerField(default=0)
    Majors = models.CharField(max_length=45)
    RequirementException = models.IntegerField(choices=EXCEPTION_CHOICE)

    # Relations
    Departments = models.ForeignKey(Department, on_delete=None)
    SemesterStart = models.ForeignKey(Semester, on_delete=None)
    GraduationSemester = models.ForeignKey(Semester, related_name="semester_graduated", on_delete=None)
    ActivitiesAttended = models.ManyToManyField(Activity)

    Graduated = models.BooleanField(default=False) # FIXME: Make function based on graduationsemester
    # FIXME: how do requirements relate through activites attended
