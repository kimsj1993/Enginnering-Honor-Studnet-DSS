# TODO: Python naming convention
# TODO: Field validation
# TODO: Verify cascade settings

# NOTE: Student status => Business logic (Should not be in db)

from django.db import models

# Create your models here.

class Semester(models.Model):
    # id autogenerated
    Semester = models.CharField(max_length=16)
    AcademicYear = models.CharField(max_length=9)

    # Relations
    # Semester.Students autogenerated TODO: Check that this is actually generated and usable

# TODO: Ask Pauline
class Requirement(models.Model):
    # id autogen
    Code = models.CharField(max_length=15)
    Description = models.TextField(max_length=255)

class Activity(models.Model):
    class Meta:
        unique_together = (('id', 'RequirementSatisfied', 'Semester'),)

    # id autogenerated
    Date = models.DateField()
    Location = models.CharField(max_length=45)
    Details = models.TextField(max_length=255)

    # Relations
    # Activity.Departments autogenerated
    Semester = models.ForeignKey(Semester, on_delete=None)
    RequirementSatisfied = models.ForeignKey(Requirement, on_delete=None)

class TrackRequirements(models.Model):
    # id autogen
    perSem = models.CharField(max_length=3, default=None)
    perYear = models.CharField(max_length=3, default=None)
    overall = models.CharField(max_length=3, default=None)
    description = models.TextField(max_length=255, default=None)

class Track(models.Model):
    id = models.CharField(primary_key=True, max_length=15)
    Name = models.CharField(max_length=45)

    # Relations
    SemesterStarted = models.ForeignKey(Semester, on_delete=None)
    requirements = models.ForeignKey(TrackRequirements, on_delete=None)

class Advisor(models.Model):
    UIN = models.PositiveIntegerField(primary_key=True)
    FirstName = models.CharField(max_length=45)
    LastName = models.CharField(max_length=45)
    MiddleName = models.CharField(max_length=45)

    # Relations
    Track = models.ForeignKey(Track, on_delete=None)

class Department(models.Model):
    Name = models.CharField(primary_key=True, max_length=7)
    ActivitiesPerSemester = models.PositiveIntegerField()
    AdvisingPerSemester = models.FloatField()

    # Relations
    # Department.Students autogenerated
    Activities = models.ManyToManyField(Activity)
    Advisors = models.ManyToManyField(Advisor)
    Track = models.ForeignKey(Track, on_delete=None)
    # FIXME: Is the following necessary
    RequiredActivities = models.ManyToManyField(
        Activity,
        related_name='required_activities',
        default=None,
    )

    def ActivitesPerYear(self):
        return self.ActivitiesPerSemester * 2

    def AdvisingPerYear(self):
        return self.AdvisingPerSemester * 2

class Research(models.Model):
    class Meta:
        unique_together = (('requirementSatisfied', 'department'),)

    # id autogen
    program = models.CharField(max_length=10, default=None)
    details = models.TextField(max_length=255, default=None)

    # Relations
    requirementSatisfied = models.ForeignKey(Requirement, default=None, on_delete=None)
    advisor = models.ForeignKey(Advisor, default=None, on_delete=None)
    department = models.ForeignKey(Department, on_delete=None)

class Campus(models.Model):
    # id autogen
    Name = models.CharField(max_length=45, unique=True)

class Section(models.Model):
    class Meta:
        unique_together = (('CRN', 'Semester'),)

    LEVEL_CHOICES = (
        ('L', 'Lower'),
        ('U', 'Upper'),
    )

    CRN = models.PositiveIntegerField(primary_key=True)
    Number = models.PositiveIntegerField()
    Level = models.CharField(
        max_length=1,
        default=None,
        choices=LEVEL_CHOICES,
    )

    # Relations
    Course = models.ForeignKey('Course', default=None, on_delete=None)
    Teacher = models.ForeignKey('Teacher', default=None, on_delete=None)
    Semester = models.ForeignKey(Semester, on_delete=None)
    Campus = models.ForeignKey(Campus, default=None, on_delete=None)

class Course(models.Model):
    class Meta:
        unique_together = (('Number', 'Title'),)

    Number = models.PositiveIntegerField(primary_key=True)
    Title = models.CharField(max_length=45, default=None)
    Credits = models.PositiveIntegerField(default=None)
    MinCredits = models.PositiveIntegerField(default=None)
    MaxCredits = models.PositiveIntegerField(default=None)
    # NOTE: Do we need min and max credits?

    # Relations
    Department = models.ForeignKey('Department', on_delete=None)

class Student(models.Model):
    UIN = models.PositiveIntegerField(primary_key=True)
    FirstName = models.CharField(max_length=45)
    LastName = models.CharField(max_length=45)
    MiddleName = models.CharField(max_length=45)
    Email = models.EmailField(max_length=45)
    GPA = models.FloatField()
    TimesOnProbation = models.PositiveIntegerField(default=0)
    TimesDismissed = models.PositiveIntegerField(default=0)
    Majors = models.CharField(max_length=45)

    # Relations
    Departments = models.ForeignKey(Department, on_delete=None)
    SemesterStart = models.ForeignKey(Semester, on_delete=None)
    SemesterGraduation = models.ForeignKey(
        Semester,
        related_name='semester_graduation',
        on_delete=None,
    )
    ActivitiesAttended = models.ManyToManyField(Activity)

    Graduated = models.BooleanField(default=False) # FIXME: Make function based on graduationsemester
    # FIXME: how do requirements relate through activites attended

class Exception(models.Model):
    class Meta:
        unique_together = (('semester', 'student'),)

    TypeOfLeave = models.CharField(max_length=45, unique=True)
    LeaveDuration = models.CharField(max_length=10, default=None)

    # Relations
    semester = models.ForeignKey(Semester, on_delete=None)
    student = models.OneToOneField(
        Student,
        on_delete=None,
        primary_key=True,
    )

class Teacher(models.Model):
    UIN = models.PositiveIntegerField(primary_key=True)
    FirstName = models.CharField(max_length=45)
    LastName = models.CharField(max_length=45)
    MiddleName = models.CharField(max_length=45)

# Essentially a history element
class StudentSectionEnrollment(models.Model):
    # id autogen
    grade = models.CharField(max_length=2, default=None)
    gradingMode = models.CharField(max_length=10, default=None)
    repeat = models.CharField(max_length=10, default=None)

    # Relations
    section = models.ForeignKey(
        Section,
        on_delete=None,
    )
    student = models.ForeignKey(Student, on_delete=None)
    semester = models.ForeignKey(Semester, on_delete=None)

    def credits(self):
        return self.section.Course.Credits;

# Essentially a history element
class StudentAdvisorMeeting(models.Model):
    # id autogen
    date = models.DateField(default=None)
    details = models.TextField(max_length=255, default=None)

    # Relations
    student = models.ForeignKey(
        Student,
        on_delete=None,
    )
    advisor = models.ForeignKey(Advisor, default=None, on_delete=None)
    requirementSatisfied = models.ForeignKey(Requirement, on_delete=None)
    semester = models.ForeignKey(Semester, on_delete=None)

# Essentially a history element
class StudentTrackEnrollment(models.Model):
    # id autogen

    # Relations
    student = models.ForeignKey(
        Student,
        on_delete=None,
    )
    track = models.ForeignKey(Track, on_delete=None)
    semesterEnrolled = models.ForeignKey(
        Semester,
        default=None,
        on_delete=None
    )
    campus = models.ForeignKey(Campus, default=None, on_delete=None)
