# TODO: Field validation
# TODO: Verify cascade settings
# TODO: All relation fields cannot be null

# FIXME: how do requirements relate through activities attended?

from django.db import models

class Activity(models.Model):
    # id autogenerated
    date = models.DateField(default=None, null=True)
    location = models.CharField(max_length=45, default=None, null=True)
    details = models.TextField(max_length=255, default=None, null=True)

    # Relations
    semester = models.ForeignKey('Semester', on_delete=None)
    requirement_satisfied = models.ForeignKey('Requirement', on_delete=None)

class Advisor(models.Model):
    uin = models.PositiveIntegerField(primary_key=True)
    first_name = models.CharField(max_length=45, default=None, null=True)
    last_name = models.CharField(max_length=45, default=None, null=True)
    middle_name = models.CharField(max_length=45, default=None, null=True)

    # Relations
    track = models.ForeignKey('Track', default=None, null=True, on_delete=None)

# FIXME: Remove
class Campus(models.Model):
    name = models.CharField(primary_key=True, max_length=45)

class College(models.Model):
    name = models.CharField(primary_key=True, max_length=2)

class Course(models.Model):
    class Meta:
        unique_together = (('number', 'title', 'department'),)

    # id autogen pk
    number = models.PositiveIntegerField()
    title = models.CharField(max_length=45, default=None, null=True)
    credits = models.PositiveIntegerField()
    min_credits = models.PositiveIntegerField(default=None, null=True)
    max_credits = models.PositiveIntegerField(default=None, null=True)

    # Relations
    department = models.ForeignKey('Department', on_delete=None)

class Degree(models.Model):
    class Meta:
        unique_together = (('department', 'concentration'),)

    name = models.CharField(max_length=4, primary_key=True)
    concentration = models.CharField(max_length=16, default=None, null=True)

    # Relations
    department = models.ForeignKey('Department', on_delete=None)

class Department(models.Model):
    name = models.CharField(primary_key=True, max_length=7)
    activities_per_semester = models.FloatField()
    advising_per_semester = models.FloatField()

    # Relations
    activities = models.ManyToManyField('Activity', default=None)
    advisors = models.ManyToManyField('Advisor', default=None)
    track = models.ForeignKey('Track', default=None, null=True, on_delete=None)
    required_activities = models.ManyToManyField(
        'Activity',
        related_name='required_activities',
        default=None,
    )
    college = models.ForeignKey('College', on_delete=None)

    def activities_per_year(self): # pragma: no cover
        return self.activities_per_semester * 2

    def advising_per_year(self): # pragma: no cover
        return self.advising_per_semester * 2

class Exception(models.Model):
    type_of_leave = models.CharField(max_length=45, default=None, null=True, unique=True)
    leave_duration = models.CharField(max_length=10, default=None, null=True)

    # Relations
    semester = models.ForeignKey('Semester', on_delete=None)
    student = models.OneToOneField(
        'Student',
        on_delete=None,
        primary_key=True,
    )

# TODO: Code as reqID, partial classes for inheriting object
class Requirement(models.Model):
    # id autogen
    code = models.CharField(max_length=15)
    description = models.TextField(max_length=255, default=None, null=True)

class Research(models.Model):
    # id autogen
    program = models.CharField(max_length=10, default=None, null=True)
    details = models.TextField(max_length=255, default=None, null=True)

    # Relations
    requirement_satisfied = models.ForeignKey('Requirement', default=None, null=True, on_delete=None)
    advisor = models.ForeignKey('Advisor', default=None, null=True, on_delete=None)
    department = models.ForeignKey('Department', on_delete=None)

class Section(models.Model):
    class Meta:
        unique_together = (('crn', 'semester'),)

    LEVEL_CHOICES = (
        ('L', 'Lower'),
        ('U', 'Upper'),
    )

    crn = models.PositiveIntegerField(primary_key=True)
    number = models.PositiveIntegerField(default=None, null=True)
    level = models.CharField(
        max_length=1,
        choices=LEVEL_CHOICES,
    )

    # Relations
    course = models.ForeignKey('Course', on_delete=None)
    teacher = models.ForeignKey('Teacher', default=None, null=True, on_delete=None)
    semester = models.ForeignKey('Semester', on_delete=None)
    campus = models.ForeignKey('Campus', default=None, null=True, on_delete=None)

class Semester(models.Model):
    id = models.PositiveIntegerField(primary_key=True)  # TODO: Need seed data with new pk
    semester = models.CharField(max_length=16, default=None, null=True)
    academic_year = models.CharField(max_length=9, default=None, null=True)

    # Relations
    successor = models.OneToOneField(
        'self',
        related_name='predecessor',
        default=None,
        null=True,
        on_delete=None
    )

    def current_semester(self):
        return self.successor == None

class Student(models.Model):
    uin = models.PositiveIntegerField(primary_key=True)

    first_name = models.CharField(max_length=45, default=None, null=True)
    last_name = models.CharField(max_length=45, default=None, null=True)
    middle_name = models.CharField(max_length=45, default=None, null=True)
    email = models.EmailField(max_length=45, default=None, null=True)

    gpa = models.FloatField(default=None, null=True)
    times_on_probation = models.PositiveIntegerField(default=0)
    times_dismissed = models.PositiveIntegerField(default=0)

    degree_candidate = models.BooleanField(default=False)
    graduated = models.BooleanField(default=False)

    # Relations
    majors = models.ManyToManyField('Degree', related_name='majors', default=None)
    minors = models.ManyToManyField('Degree', related_name='minors', default=None)
    start_semester = models.ForeignKey('Semester', default=None, null=True, on_delete=None)
    graduation_semester = models.ForeignKey(
        'Semester',
        related_name='graduation_semester',
        default=None,
        null=True,
        on_delete=None,
    )
    activities_attended = models.ManyToManyField('Activity', default=None)

    graduated = models.BooleanField(default=False) # FIXME: Make function based on graduationsemester

    def status_f_gpa(self):
        pass

    def first_year_grace(self):
        pass

# Essentially a history element
class StudentAdvisorMeeting(models.Model):
    # id autogen
    date = models.DateField(default=None, null=True)
    details = models.TextField(max_length=255, default=None, null=True)

    # Relations
    student = models.ForeignKey('Student', on_delete=None)
    advisor = models.ForeignKey('Advisor', default=None, null=True, on_delete=None)
    requirement_satisfied = models.ForeignKey('Requirement', on_delete=None)
    semester = models.ForeignKey('Semester', on_delete=None)

# Essentially a history element
class StudentResearch(models.Model):
    # id autogen
    course_credit = models.PositiveIntegerField(default=None, null=True)
    paper_published = models.CharField(max_length=2, default=None, null=True)
    conference_attended = models.CharField(max_length=2, default=None, null=True)
    presentation = models.CharField(max_length=2, default=None, null=True)
    details = models.TextField(max_length=255, default=None, null=True)

    # Relations
    student = models.ForeignKey('Student', on_delete=None)
    research = models.ForeignKey('Research', on_delete=None)
    semester = models.ForeignKey(
        'Semester',
        default=None,
        null=True,
        on_delete=None,
    )
    # requirement can be reached through research.requirement

# Essentially a history element
class StudentSectionEnrollment(models.Model):
    # id autogen
    grade = models.CharField(max_length=2, default=None, null=True)
    grading_mode = models.CharField(max_length=10, default=None, null=True) # s/u
    repeat = models.CharField(max_length=10, default=None, null=True)

    # Relations
    section = models.ForeignKey('Section', on_delete=None)
    student = models.ForeignKey('Student', on_delete=None)

    def semester(self):
        return self.section.semester

    def credits(self):
        return self.section.course.credits

# Essentially a history element
class StudentTrackEnrollment(models.Model):
    # id autogen

    # Relations
    student = models.ForeignKey('Student', on_delete=None)
    track = models.ForeignKey('Track', on_delete=None)
    semester = models.ForeignKey('Semester', on_delete=None)
    campus = models.ForeignKey('Campus', default=None, null=True, on_delete=None)

class Teacher(models.Model):
    uin = models.PositiveIntegerField(primary_key=True)
    first_name = models.CharField(max_length=45, default=None, null=True)
    last_name = models.CharField(max_length=45, default=None, null=True)
    middle_name = models.CharField(max_length=45, default=None, null=True)

class Track(models.Model):
    id = models.CharField(primary_key=True, max_length=15)
    name = models.CharField(max_length=45)

    # Relations
    semester_started = models.ForeignKey('Semester', default=None, null=True, on_delete=None)
    requirements = models.ForeignKey('TrackRequirements', default=None, null=True, on_delete=None)

class TrackRequirements(models.Model):
    # id autogen
    per_sem = models.FloatField()
    description = models.TextField(max_length=255, default=None, null=True)

    def per_year(self): # pragma: no cover
        return self.per_sem * 2

    def overall(self): # pragma: no cover
        return self.per_year() * 2
